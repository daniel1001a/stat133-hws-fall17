p <- ggplot(sample, aes(x = dir, y = ..count.., fill=mag))
#after setting it all up we have to make a bar plot with polar coordinate
p + geom_bar() + coord_polar()
rr <- ggplot(post1, aes(x = factor(salary))) +
geom_bar(width = 1, colour = "red")
rr + coord_polar()
rr <- ggplot(post1, aes(x = factor(salary))) +
geom_bar(width = 1, colour = "red")
rr + coord_polar()
ggplot(post1, aes(x = factor(salary))) +
geom_bar(width = 1, colour = "red") +
coord_polar()
library(climatol)
install.packages(climatol)
install.packages(climatol)
ggplot(post1, aes(x = factor(salary)))
ggplot(post1, aes(x = salary))
View(post1)
ggplot(post1, aes(x = Salary)) +
geom_bar(width = 1, colour = "red") +
coord_polar()
ggplot(post1, aes(x = factor(Salary))) +
geom_bar(width = 1, colour = "red") +
coord_polar()
yy <- ggplot(post1, aes(x = Salary, fill = experience))
# Wind rose
yy + geom_bar(width = 1) + coord_polar()
# Race track plot
yy + geom_bar(width = 0.9, position = "fill") + coord_polar(theta = "y")
yy <- ggplot(post1, aes(x = Salary, fill = experience))
yy
yy + geom_bar(width = 1) + coord_polar()
yy <- ggplot(post1, aes(x = Salary, fill = experience))
# Wind rose
yy + geom_bar(width = 1) + coord_polar()
# Race track plot
yy + geom_bar(width = 0.9, position = "fill") + coord_polar(theta = "y")
yy <- ggplot(post1, aes(x = Salary, fill = experience))
# Wind rose
yy + geom_bar(width = 1) #+ coord_polar()
yy <- ggplot(post1, aes(x = Salary))#, fill = experience))
# Wind rose
yy + geom_bar(width = 1) + coord_polar()
yy <- ggplot(post1, aes(x = factor(Salary)))#, fill = experience))
# Wind rose
yy + geom_bar(width = 1) + coord_polar()
yy <- ggplot(post1, aes(x = factor(Salary), fill = experience))
# Wind rose
yy + geom_bar(width = 1) + coord_polar()
yy <- ggplot(post1, aes(x = as.factor(Salary), fill = experience))
# Wind rose
yy + geom_bar(width = 1) + coord_polar()
# Race track plot
yy + geom_bar(width = 0.9, position = "fill") + coord_polar(theta = "y")
yy <- ggplot(post1, aes(x = as.factor(position), fill = team))
# Wind rose
yy + geom_bar(width = 1) + coord_polar()
yy <- ggplot(post1, aes(x = as.factor(Position), fill = team))
# Wind rose
yy + geom_bar(width = 1) + coord_polar()
# Race track plot
yy + geom_bar(width = 0.9, position = "fill") + coord_polar(theta = "y")
ggplot(post1, aes(x = factor(Salary))) +
geom_bar(width = 1, colour = "red") +
coord_polar()
ggplot(post1, aes(x = factor(team))) +
geom_bar(width = 1, colour = "red") +
coord_polar()
set.seed(1234)
#creat 100 wind directions ramdonly and make it be inside  16 areas
dir <- cut_interval(runif(100,0,360), n = 16)
c#reat 100 wind speeds and separate it to 4 levels
mag <- cut_interval(rgamma(100,15), 4)
sample <- data_frame(dir = dir, mag = mag)
#let x axis = wind directions, y = frequency, color represent wind speed.
p <- ggplot(sample, aes(x = dir, y = ..count.., fill=mag))
#after setting it all up we have to make a bar plot with polar coordinate
p + geom_bar() + coord_polar()
library(climatol)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(readr)
library(dplyr)
post1 <- read.csv('/Users/Danielisgood/stat133-hws-fall17/hw02/data/nba2017-player-statistics.csv')
ggplot(teams_data, aes(x = reorder(team, salary), y = salary))+
geom_bar(stat = 'identity', color = 'white', fill = 'grey')+
coord_flip()+
ylab("Total Salary") + xlab("Team")+
ggtitle("NBA Team ranked by Total Salary")+
geom_hline(yintercept = mean(teams_data$salary), color = "red", size = 1.5)
ggplot(teams_data, aes(x = reorder(team, salary), y = salary))+
geom_bar(stat = 'identity', color = 'white', fill = 'grey')+
coord_flip()+
ylab("Total Salary") + xlab("Team")+
ggtitle("NBA Team ranked by Total Salary")+
geom_hline(yintercept = mean(teams_data$salary), color = "red", size = 1.5)
ggplot(teams_data, aes(x = reorder(team, salary), y = salary))+
geom_bar(stat = 'identity', color = 'white', fill = 'grey')+
coord_flip()+
ylab("Total Salary") + xlab("Team")+
ggtitle("NBA Team ranked by Total Salary")+
geom_hline(yintercept = mean(teams_data$salary), color = "red", size = 1.5)
library(ggplot2)
library(readr)
library(dplyr)
post1 <- read.csv('/Users/Danielisgood/stat133-hws-fall17/hw02/data/nba2017-player-statistics.csv')
ggplot(teams_data, aes(x = reorder(team, salary), y = salary))+
geom_bar(stat = 'identity', color = 'white', fill = 'grey')+
coord_flip()+
ylab("Total Salary") + xlab("Team")+
ggtitle("NBA Team ranked by Total Salary")+
geom_hline(yintercept = mean(teams_data$salary), color = "red", size = 1.5)
ggplot(post1, aes(x = reorder(team, salary), y = salary))+
geom_bar(stat = 'identity', color = 'white', fill = 'grey')+
coord_flip()+
ylab("Total Salary") + xlab("Team")+
ggtitle("NBA Team ranked by Total Salary")+
geom_hline(yintercept = mean(teams_data$salary), color = "red", size = 1.5)
ggplot(post1, aes(x = reorder(team, salary), y = salary))+
geom_bar(stat = 'identity', color = 'white', fill = 'grey')+
coord_flip()+
ylab("Total Salary") + xlab("Team")+
#ggtitle("NBA Team ranked by Total Salary")+
#geom_hline(yintercept = mean(teams_data$salary), color = "red", size = 1.5)
ggplot(post1, aes(x = reorder(team, Salary), y = salary))+
geom_bar(stat = 'identity', color = 'white', fill = 'grey')+
coord_flip()+
ylab("Total Salary") + xlab("Team")+
ggtitle("NBA Team ranked by Total Salary")+
geom_hline(yintercept = mean(teams_data$salary), color = "red", size = 1.5)
ggplot(post1, aes(x = reorder(team, Salary), y = Salary))+
geom_bar(stat = 'identity', color = 'white', fill = 'grey')+
coord_flip()+
ylab("Total Salary") + xlab("Team")+
ggtitle("NBA Team ranked by Total Salary")+
geom_hline(yintercept = mean(teams_data$salary), color = "red", size = 1.5)
ggplot(post1, aes(x = reorder(team, Salary), y = Salary))+
geom_bar(stat = 'identity', color = 'white', fill = 'grey')+
coord_flip()+
ylab("Total Salary") + xlab("Team")+
ggtitle("NBA Team ranked by Total Salary")+
geom_hline(yintercept = mean(post1$Salary), color = "red", size = 1.5)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(readr)
library(dplyr)
post1 <- read.csv('/Users/Danielisgood/stat133-hws-fall17/hw02/data/nba2017-player-statistics.csv')
ggplot(post1, aes(x = reorder(team, Salary), y = Salary))+
geom_bar(stat = 'identity', color = 'white', fill = 'grey')+
coord_flip()+
ylab("Total Salary") + xlab("Team")+
ggtitle("NBA Team ranked by Total Salary")+
geom_hline(yintercept = mean(post1$Salary), color = "red", size = 1.5)
ggplot(post1, aes(x = factor(team))) +
geom_bar(width = 1, colour = "red") +
coord_polar()
yy <- ggplot(post1, aes(x = as.factor(Position), fill = team))
# Wind rose
yy + geom_bar(width = 1) + coord_polar()
# Race track plot
yy + geom_bar(width = 0.9, position = "fill") + coord_polar(theta = "y")
set.seed(1234)
#creat 100 wind directions ramdonly and make it be inside  16 areas
dir <- cut_interval(runif(100,0,360), n = 16)
c#reat 100 wind speeds and separate it to 4 levels
mag <- cut_interval(rgamma(100,15), 4)
sample <- data_frame(dir = dir, mag = mag)
#let x axis = wind directions, y = frequency, color represent wind speed.
p <- ggplot(sample, aes(x = dir, y = ..count.., fill=mag))
#after setting it all up we have to make a bar plot with polar coordinate
p + geom_bar() + coord_polar()
P(red) = P(red | bag1) P(bag1) + P(red | bag2) P(bag2)
P(white) = P(white | bag1) P(bag1) + P(white | bag2) P(bag2)
bag1 <- c('white', 'white', 'red')
bag2 <- c(rep('white', 3), 'red')
bags <- c('bag1', 'bag2')
repetitions <- 1000
drawn_balls <- character(repetitions)
set.seed(345)
for (i in 1:repetitions) {
# select one bag
chosen_bag <- sample(bags, 1)
# draw a ball from chosen bag
if (chosen_bag == 'bag1') {
drawn_balls[i] <- sample(bag1, 1)
} else {
drawn_balls[i] <- sample(bag2, 1)
}
}
table(drawn_balls) / repetitions
head(USArrests)
states <- rownames(USArrests)
head(states)
head(USArrests)
states <- rownames(USArrests)
head(states)
num_chars <- nchar(states)
paste('Pumpkin', 'Pie')
paste('a', 'b', 'c', 'd', 'e')
paste('a', 'b', 'c', 'd', 'e', sep = '-')
paste('a', 1:5, sep = '.')
paste0('Pumpkin', 'Pie')
#load the package
library(dplyr)
library(readr)
#source
source("~/stat133-hws-fall17/hw04/code/functions.R")
setwd("~/stat133-hws-fall17/hw04/")  #in order to read the csv file
scores <- read.csv("/data/rawdata/rawscores.csv")
setwd("output")
sink_file <- ("summary-rawscores.txt")
# Get row and column number
ncols <- ncol(scores)
nrows <- nrow(scores)
sink(sink_file)
str(scores)
for(k in 1:ncols){
print_stats(scores[ ,k])
}
sink()
# Replace NA values in eac column with zero
for(k in 1:ncols) {
scores[is.na(scores[,k]), k] <- 0
}
# test
# apply(scores, 2, range)
scores$QZ1 <- rescale100(scores$QZ1, xmin = 0, xmax = 12)
scores$QZ2 <- rescale100(scores$QZ2, xmin = 0, xmax = 18)
scores$QZ3 <- rescale100(scores$QZ3, xmin = 0, xmax = 20)
scores$QZ4 <- rescale100(scores$QZ4, xmin = 0, xmax = 20)
scores$Test1 <- rescale100(scores$EX1, xmin = 0, xmax = 80)
scores$Test2 <- rescale100(scores$EX2, xmin = 0, xmax = 90)
# Lab score
Lab <- double(nrows)
for(k in 1:nrows){
Quiz[k] <- score_lab(unlist(scores[k, "ATT"]))
}
scores$Lab <- Quiz
# apply(scores, 2, range)
Homework <- double(nrows)
for(k in 1:nrows){
Homework[k] <- score_homework(unlist(scores[k, 1:9]))
}
scores$Homework <- Homework
# Quiz scores
# Check columns
names(scores[, 11:14])
Quiz <- double(nrows)
for(k in 1:nrows){
Quiz[k] <- score_quiz(unlist(scores[k, 11:14]))
}
scores$Quiz <- Quiz
# Overall score
lab_w <- .10
hwk_w <- .30
quiz_w <- .15
test1_w <- .20
test2_w <- .25
Overall <- double(nrows)
for(k in 1:nrows){
lab <- lab_w * scores[k, "Lab"]
hwk <- hwk_w * scores[k, "Homework"]
quiz <- quiz_w * scores[k, "Quiz"]
test1 <- test1_w * scores[k, "Test1"]
test2 <- test2_w * scores[k, "Test1"]
Overall[k] <- hwk + quiz + test1 + test2  + lab
}
scores$Overall <- Overall
#score_lab()
grade_scores <- function(a = 0){
if(a < 50){return("F")}
else if(a < 60){return("D-")}
else if(a < 70){return("D")}
else if(a < 77.5){return("C-")}
else if(a < 79.5){return("C+")}
else if(a < 82){return("B-")}
else if(a < 86){return("B")}
else if(a < 88){return("B+")}
else if(a < 90){return("A-")}
else if(a < 95){return("A")}
else{ return("A+")}
}
Grades <- character(nrows)
for(k in 1:nrows){
Grades[k] <- grade_scores(scores[k, "Overall"])
}
scores$Grades <- Grades
col_names <- c("Lab", "Homework", "Quiz", "Test1", "Test2")
old_dir <- getwd()
setwd("output")
for(name in col_names){
write_file <- file.create(paste0(name, "-stats.txt"))
sink(paste0(name, "-stats.txt"))
summary(scores[, name])
sink()
}
sink(sink_file)
str(scores)
sink()
# Got to top of file
setwd("..")
write.csv(scores, "data/cleandata/cleanscores.csv")
nrows <- nrow(scores)
nrows <- nrow(scores)
remove_missing <- function(a = c(1,2,3)){
l = length(a)
m = 1
b = vector(length = 0L)
for(i in 1:l){
if(is.na(a[i])){
m = m
}
else{
b[m] = a[i]
m = 1 + m
}
}
if(length(b) == 0){
return("Incorrect input")
}
else{
return(b)
}
}
#get_minimum()
get_minimum <- function(a = c(1,2,3), na.rm = TRUE){
if(na.rm){
a = remove_missing(a)
}
a = sort(a, decreasing = FALSE)
return(a[1])
}
#get_maximum()
get_maximum <- function(a = c(1,2,3), na.rm = TRUE){
if(na.rm){
a = remove_missing(a)
}
a = sort(a, decreasing = TRUE)
return(a[1])
}
#get_range()
get_range <- function(a = c(1,2,3), na.rm = TRUE){
if(na.rm){
a = remove_missing(a)
}
return(get_maximum(a) - get_minimum(a))
}
#get_quartile1()
get_quartile1 <- function(a = c(1,2,3), na.rm = TRUE){
if(na.rm){
a = remove_missing(a)
}
q <- quantile(a, na.rm = FALSE)
return(as.double(q[2]))
}
# get_quartile1(a, na.rm = TRUE)
#get_quartile3()
get_quartile3 <- function(a = c(1,2,3), na.rm = TRUE){
if(na.rm){
a = remove_missing(a)
}
q <- quantile(a, na.rm = FALSE)
return(as.double(q[4]))
}
# get_quartile3(a, na.rm = TRUE)
#get_median()
get_median <- function(a = c(1,2,3), na.rm = TRUE){
if(na.rm){
a = remove_missing(a)
}
a = sort(a)
l = length(a)
if(l %% 2 == 0){
m = l/2
return(0.5 * (a[m] + a[m + 1]))
}
else{
m <- (l + 1) / 2
return(a[m])
}
}
# a <- c(1,4,7,NA, 10)
# get_median(a, na.rm = TRUE)
#get_average()
get_average <- function(a = c(1,2,3), na.rm = TRUE){
if(na.rm){
a = remove_missing(a)
}
l = length(a)
s = 0
for(i in 1:l){
s = s+ a[i]
}
return( s/l)
}
# a <- c(1,4,6,NA,10)
# get_average(a, na.rm = TRUE)
#get_stdev()
get_stdev <- function(a = c(1,2,3), na.rm = TRUE){
if(na.rm){
a = remove_missing(a)
}
l = length(a)
ave = get_average(a)
s = 0
m = l-1
for(i in 1:l){
s = s + ( a[i] - ave )^2
}
return(sqrt( s/m ))
}
# get_stdev(a, na.rm = TRUE)
#count_missing()
count_missing <- function( a = c(1,2,3)){
l = length(a)
m = 0
for(i in 1:l){
if(is.na(a[i])){
m = 1 + m
}
}
return(m)
}
# count_missing
#summary_stats()
summary_stats <- function(a){
percent10 <- quantile(a, 0.1, na.rm = TRUE)
percent30 <- quantile(a, 0.9, na.rm = TRUE)
return(stats <- list(
minimum = get_minimum(a, TRUE),
maximum = get_maximum(a, TRUE),
percent10 = as.double(percent10),
percent30 = as.double(percent30),
quantile1 = get_quartile1(a, TRUE),
quantile3 = get_quartile3(a, TRUE),
median = get_median(a, TRUE),
mean = get_average(a, TRUE),
range = get_range(a, TRUE),
stdev = get_stdev(a, TRUE),
missing = count_missing(a)
))
}
#print_stats()
print_stats <- function(a){
m = 0
stats = summary_stats(a)
for(i in 1:11){
if(nchar(names(stats[i])) > m){
m = nchar(names(stats[i]))
}
}
for(i in 1:11){
print(paste(format(names(stats[i]), width = m),
format(round(as.double(stats[i]), 4), nsmall = 4),
sep = " : ")
)
}
}
#drop_lowest()
drop_lowest <- function(a) {
if(!is.numeric(a)) {
stop("The vector contain not numeric variable")}
l = length(a)
m = get_minimum(a,na.rm = TRUE)
for(i in 1:l){
if (a[i] == m) {
a[i] <- NA
stop(return(remove_missing(a)))
}
}
}
#rescale100()
rescale100 <- function(x = c(1,2,3), xmin = 0, xmax = 0){
up <-  x - xmin
bot <- xmax - xmin
return(z = 100 * ( up/bot))
}
#score_homework()
score_homework <- function(hws = c(1,2,3), drop = TRUE){
if(drop){
hws = drop_lowest(hws)
}
return(get_average(hws, na.rm = FALSE))
}
#score_quiz()
score_quiz <- function(quiz = c(1,2,3), drop = TRUE){
if(drop){
quiz = drop_lowest(quiz)
}
return(get_average(quiz, na.rm = FALSE))
}
#score_lab()
score_lab <- function(a = 0){
if(a <= 6){return(0)}
else if(a <= 7){return(20)}
else if(a <= 8){return(40)}
else if(a <= 9){return(60)}
else if(a <= 10){return(80)}
else if(a <= 12){return(100)}
}
library(dplyr)
library(readr)
source("~/stat133-hws-fall17/hw04/code/functions.R")
setwd("~/stat133-hws-fall17/hw04/")  #in order to read the csv file
scores <- read.csv("/data/rawdata/rawscores.csv")
setwd("~/stat133-hws-fall17/hw04/")
write.csv(scores, "data/cleandata/cleanscores.csv")
setwd("~/stat133-hws-fall17/hw04/")
scores <- read.csv("/data/rawdata/rawscores.csv")
getwd
getwd()
dir()
